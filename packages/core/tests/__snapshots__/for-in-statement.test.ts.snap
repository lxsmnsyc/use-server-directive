// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`ForInStatement > client > should skip server for-in statements in non-async functions 1`] = `
"const example = () => {
  for (const key in items) {
    'use server';
    doStuff();
  }
};"
`;

exports[`ForInStatement > client > should skip top-level values for scope 1`] = `
"import { $$server as _$$server } from "use-server-directive/client";
const value = 'foo bar';
const _server = _$$server("/__server/bb5fd6ee-example-0-anonymous");
for (const key in items) {
  const [_type, _result, _mutations] = await _server();
  if (_type === 4) {
    throw _result;
  }
}"
`;

exports[`ForInStatement > client > should transform break statements 1`] = `
"import { $$server as _$$server } from "use-server-directive/client";
const _server = _$$server("/__server/bb5fd6ee-example-0-anonymous");
for (const key in items) {
  const [_type, _result, _mutations] = await _server();
  if (_type === 0) {
    break;
  } else if (_type === 4) {
    throw _result;
  }
}"
`;

exports[`ForInStatement > client > should transform continue statements 1`] = `
"import { $$server as _$$server } from "use-server-directive/client";
const _server = _$$server("/__server/bb5fd6ee-example-0-anonymous");
for (const key in items) {
  const [_type, _result, _mutations] = await _server();
  if (_type === 1) {
    continue;
  } else if (_type === 4) {
    throw _result;
  }
}"
`;

exports[`ForInStatement > client > should transform labeled break statements 1`] = `
"import { $$server as _$$server } from "use-server-directive/client";
const _server = _$$server("/__server/bb5fd6ee-example-0-anonymous");
foo: for (const key in items) {
  const [_type, _result, _mutations] = await _server();
  if (_type === 0) {
    if (_result === "foo") {
      break foo;
    }
  } else if (_type === 4) {
    throw _result;
  }
}"
`;

exports[`ForInStatement > client > should transform labeled continue statements 1`] = `
"import { $$server as _$$server } from "use-server-directive/client";
const _server = _$$server("/__server/bb5fd6ee-example-0-anonymous");
foo: for (const key in items) {
  const [_type, _result, _mutations] = await _server();
  if (_type === 1) {
    if (_result === "foo") {
      continue foo;
    }
  } else if (_type === 4) {
    throw _result;
  }
}"
`;

exports[`ForInStatement > client > should transform valid server for-in statements 1`] = `
"import { $$server as _$$server } from "use-server-directive/client";
const _server = _$$server("/__server/bb5fd6ee-example-0-anonymous");
for (const key in items) {
  const [_type, _result, _mutations] = await _server();
  if (_type === 4) {
    throw _result;
  }
}"
`;

exports[`ForInStatement > client > should transform valid server functions with scope 1`] = `
"import { $$server as _$$server } from "use-server-directive/client";
const _server = _$$server("/__server/bb5fd6ee-example-0-foo");
async function foo() {
  const value = 'foo bar';
  for (const key in items) {
    const [_type, _result, _mutations] = await _server(value);
    if (_type === 4) {
      throw _result;
    }
  }
}"
`;

exports[`ForInStatement > server > should skip server for-in statements in non-async functions 1`] = `
"const example = () => {
  for (const key in items) {
    'use server';
    doStuff();
  }
};"
`;

exports[`ForInStatement > server > should skip top-level values for scope 1`] = `
"import { $$server as _$$server } from "use-server-directive/server";
const value = 'foo bar';
const _server = _$$server("/__server/bb5fd6ee-example-0-anonymous", async function () {
  try {
    await doStuff(value);
  } catch (_error) {
    return [4, _error];
  }
  return [3];
});
for (const key in items) {
  const [_type, _result, _mutations] = await _server();
  if (_type === 4) {
    throw _result;
  }
}"
`;

exports[`ForInStatement > server > should transform break statements 1`] = `
"import { $$server as _$$server } from "use-server-directive/server";
const _server = _$$server("/__server/bb5fd6ee-example-0-anonymous", async function () {
  try {
    if (cond()) {
      await doStuff(value);
    } else {
      return [0, null];
    }
    await doMoreStuff();
  } catch (_error) {
    return [4, _error];
  }
  return [3];
});
for (const key in items) {
  const [_type, _result, _mutations] = await _server();
  if (_type === 0) {
    break;
  } else if (_type === 4) {
    throw _result;
  }
}"
`;

exports[`ForInStatement > server > should transform continue statements 1`] = `
"import { $$server as _$$server } from "use-server-directive/server";
const _server = _$$server("/__server/bb5fd6ee-example-0-anonymous", async function () {
  try {
    if (cond()) {
      await doStuff(value);
    } else {
      return [1, null];
    }
    await doMoreStuff();
  } catch (_error) {
    return [4, _error];
  }
  return [3];
});
for (const key in items) {
  const [_type, _result, _mutations] = await _server();
  if (_type === 1) {
    continue;
  } else if (_type === 4) {
    throw _result;
  }
}"
`;

exports[`ForInStatement > server > should transform labeled break statements 1`] = `
"import { $$server as _$$server } from "use-server-directive/server";
const _server = _$$server("/__server/bb5fd6ee-example-0-anonymous", async function () {
  try {
    if (cond()) {
      await doStuff(value);
    } else {
      return [0, "foo"];
    }
    await doMoreStuff();
  } catch (_error) {
    return [4, _error];
  }
  return [3];
});
foo: for (const key in items) {
  const [_type, _result, _mutations] = await _server();
  if (_type === 0) {
    if (_result === "foo") {
      break foo;
    }
  } else if (_type === 4) {
    throw _result;
  }
}"
`;

exports[`ForInStatement > server > should transform labeled continue statements 1`] = `
"import { $$server as _$$server } from "use-server-directive/server";
const _server = _$$server("/__server/bb5fd6ee-example-0-anonymous", async function () {
  try {
    if (cond()) {
      await doStuff(value);
    } else {
      return [1, "foo"];
    }
    await doMoreStuff();
  } catch (_error) {
    return [4, _error];
  }
  return [3];
});
foo: for (const key in items) {
  const [_type, _result, _mutations] = await _server();
  if (_type === 1) {
    if (_result === "foo") {
      continue foo;
    }
  } else if (_type === 4) {
    throw _result;
  }
}"
`;

exports[`ForInStatement > server > should transform valid server for-in statements 1`] = `
"import { $$server as _$$server } from "use-server-directive/server";
const _server = _$$server("/__server/bb5fd6ee-example-0-anonymous", async function () {
  try {
    await doStuff();
  } catch (_error) {
    return [4, _error];
  }
  return [3];
});
for (const key in items) {
  const [_type, _result, _mutations] = await _server();
  if (_type === 4) {
    throw _result;
  }
}"
`;

exports[`ForInStatement > server > should transform valid server functions with scope 1`] = `
"import { $$server as _$$server } from "use-server-directive/server";
const _server = _$$server("/__server/bb5fd6ee-example-0-foo", async function (value) {
  try {
    await doStuff(value);
  } catch (_error) {
    return [4, _error];
  }
  return [3];
});
async function foo() {
  const value = 'foo bar';
  for (const key in items) {
    const [_type, _result, _mutations] = await _server(value);
    if (_type === 4) {
      throw _result;
    }
  }
}"
`;
